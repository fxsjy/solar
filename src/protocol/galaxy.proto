package baidu.galaxy;

//////////////////////////////////////////
////////user
//////////////////////////////////////////
message User {
    optional string user = 1;
    optional string token = 2;
}

message Quota {
    optional int64 millicore = 1;
    optional int64 memory = 2;
    optional int64 storage = 3;
}

enum Authority {
    kAuthoritySubmit = 1;
    kAuthorityRemove = 2;
    kAuthorityUpdate = 3;
    kAuthorityRead = 4;
}

enum AuthorityAction {
    kActionAdd = 1;
    kActionRemove = 2;
    kActionSet = 3;
    kActionClera = 4;
}

message Grant {
    optional User user = 1;
    repeated string tags = 2;
    optional AuthorityAction action = 3;
    repeated Authority authority = 4;
}


///////////////////////////////////////////
///// resource
///////////////////////////////////////////
message CpuResource {
    optional int64 milli_core = 1;
    optional bool excess = 2;
}

message MemoryResource {
    optional int64 size = 1;
    optional bool excess = 2;
}

message PortResource {
    optional uint32 port_size = 1;
    optional uint32 start_port = 2;
}

enum StorageType {
    KSsd = 1;
    KDisk = 2;
    KBfs = 3;
    KTmpfs = 4;
}

message VolumResource {
    optional int64 size = 1;
    optional StorageType type = 2;
    optional string source_path = 3;
    optional string dist_path = 4;
}

enum JobType {
    kBatch = 1;
    kService = 2;
    kMonitor = 3;
}

message Package {
    optional string source_path = 1; // support nfs/hdfs/ftp
    optional string dest_path = 2;   // local path
}
message ExePackage {
    optional Package package = 1;
    optional string pre_cmd = 2;     // executed befor overwriting the old package, eg: stop service
    optional string post_cmd = 3;    // execute after overwriting the old package, eg: start service
}

message DataPackage {
    repeated Package packages = 1;
    optional string pre_cmd = 2;     // 
    optional string post_cmd = 3;    // 
}

message Deploy {
    optional uint32 replica = 1;
    optional uint32 step = 2;
    optional uint32 interval = 3;
}

message Service {
    optional string service_name = 1;
    optional uint32 port = 2;
    optional bool use_bns = 3;
}

message Job {
    // Job
    optional string name = 1;
    optional uint32 replica = 2;
    optional JobType type = 3;

    // package
    optional ExePackage exe_package = 4;
    optional DataPackage data_package = 5;

    // Resource
    optional CpuResource cpu = 6;
    optional MemoryResource memory = 7;
    repeated VolumResource volums = 8;
    optional PortResource ports = 9;

    // service
    repeated Service services = 10;

    // task, donot support now
}

